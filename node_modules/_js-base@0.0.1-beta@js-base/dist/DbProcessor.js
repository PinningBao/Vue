var FS = require("fs");
var Path = require("path");
var mkdirp = require("mkdirp");
var Uuid = require("node-uuid");
var PersistenceError_1 = require("./PersistenceError");
var DbProcessor = (function () {
    function DbProcessor(config) {
        this.config = config;
    }
    DbProcessor.prototype.getSingle = function (dbCommand, callback) {
        FS.exists(dbCommand.getEntityPath(), function (exists) {
            if (!exists)
                return callback(null);
            FS.readFile(dbCommand.getEntityPath(), function (err, entityData) {
                if (err)
                    return callback(null, err);
                callback(entityData.toString());
            });
        });
    };
    DbProcessor.prototype.getMany = function (dbCommand, search, callback) {
        var errors = new Array();
        FS.readdir(dbCommand.getEntityRootPath(), function (err, filenames) {
            if (err)
                return callback(null, errors, err);
            var results = new Array();
            var readFile = function (index) {
                if (index === void 0) { index = 0; }
                var filename = filenames[index];
                try {
                    var relativeFilePath = Path.join(dbCommand.getEntityRootPath(), filename);
                    FS.readFile(relativeFilePath, function (err, buffer) {
                        if (err)
                            throw Error(err);
                        var entityData = buffer.toString();
                        if (search == null || search.test(JSON.parse(entityData)))
                            results.push(entityData);
                        if (index < (filenames.length - 1))
                            readFile(++index);
                        else
                            callback(results, errors);
                    });
                }
                catch (err) {
                    var id = (new RegExp("(.+)\.[^\.]+$").exec(filename))[1];
                    errors.push(new PersistenceError_1.PersistenceError(id, err.toString()));
                }
            };
            readFile();
        });
    };
    DbProcessor.prototype.saveSingle = function (dbCommand, entity, callback) {
        dbCommand.entityId = (dbCommand.entityId || entity.id || Uuid.v1());
        entity.id = dbCommand.entityId;
        mkdirp(dbCommand.getEntityRootPath(), function (err) {
            if (err)
                return callback(null, err);
            var entityData = JSON.stringify(entity);
            FS.writeFile(dbCommand.getEntityPath(), entityData, function (err) {
                if (err)
                    throw Error(err);
                callback(entityData);
            });
        });
    };
    DbProcessor.prototype.saveMany = function (dbCommand, entities, callback) {
        var _this = this;
        var count = entities.length;
        var createdEntities = new Array();
        var errors = new Array();
        if (count == 0)
            return callback(createdEntities, errors);
        var save = function (index) {
            if (index === void 0) { index = 0; }
            var entity = entities[index];
            try {
                _this.saveSingle(dbCommand.forEntityId(entity.id), entity, function (createdEntityData) {
                    createdEntities.push(createdEntityData);
                    if (index < (count - 1))
                        save(index + 1);
                    else
                        callback(createdEntities, errors);
                });
            }
            catch (err) {
                errors.push(new PersistenceError_1.PersistenceError(entity.id, err));
            }
        };
        save();
    };
    DbProcessor.prototype.deleteSingle = function (dbCommand, callback) {
        var entityPath = dbCommand.getEntityPath();
        FS.exists(entityPath, function (exists) {
            if (!exists)
                return callback();
            FS.unlink(entityPath, function (err) {
                if (err)
                    return callback(err);
                callback();
            });
        });
    };
    DbProcessor.prototype.deleteMany = function (dbCommand, ids, callback) {
        var _this = this;
        var count = ids.length;
        var deletedIds = new Array();
        var errors = new Array();
        if (count == 0)
            return callback(deletedIds, errors);
        var save = function (index) {
            if (index === void 0) { index = 0; }
            var id = ids[index];
            try {
                _this.deleteSingle(dbCommand.forEntityId(id), function () {
                    deletedIds.push(id);
                    if (index < (count - 1))
                        save(index + 1);
                    else
                        callback(deletedIds, errors);
                });
            }
            catch (err) {
                errors.push(new PersistenceError_1.PersistenceError(id, err));
            }
        };
        save();
    };
    return DbProcessor;
})();
exports.DbProcessor = DbProcessor;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiUHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbIkRiUHJvY2Vzc29yIiwiRGJQcm9jZXNzb3IuY29uc3RydWN0b3IiLCJEYlByb2Nlc3Nvci5nZXRTaW5nbGUiLCJEYlByb2Nlc3Nvci5nZXRNYW55IiwiRGJQcm9jZXNzb3Iuc2F2ZVNpbmdsZSIsIkRiUHJvY2Vzc29yLnNhdmVNYW55IiwiRGJQcm9jZXNzb3IuZGVsZXRlU2luZ2xlIiwiRGJQcm9jZXNzb3IuZGVsZXRlTWFueSJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBWSxFQUFFLFdBQW1CLElBQUksQ0FBQyxDQUFBO0FBQ3RDLElBQVksSUFBSSxXQUFpQixNQUFNLENBQUMsQ0FBQTtBQUN4QyxJQUFZLE1BQU0sV0FBZSxRQUFRLENBQUMsQ0FBQTtBQUUxQyxJQUFZLElBQUksV0FBaUIsV0FBVyxDQUFDLENBQUE7QUFNN0MsaUNBQWlDLG9CQUFvQixDQUFDLENBQUE7QUFFdEQ7SUFHSUEscUJBQVlBLE1BQWNBO1FBQ3RCQyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFFTUQsK0JBQVNBLEdBQWhCQSxVQUFpQkEsU0FBb0JBLEVBQUVBLFFBQTZDQTtRQUNoRkUsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsYUFBYUEsRUFBRUEsRUFBRUEsVUFBQ0EsTUFBZUE7WUFDakRBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO2dCQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVuQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsYUFBYUEsRUFBRUEsRUFBRUEsVUFBQ0EsR0FBUUEsRUFBRUEsVUFBa0JBO2dCQUNoRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7b0JBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLENB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
