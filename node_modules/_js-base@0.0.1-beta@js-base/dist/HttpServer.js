var Http = require("http");
var Util = require("util");
var FS = require("fs");
var HttpStatusCodes = require("http-status-codes");
var DbCommand_1 = require("./DbCommand");
var Search_1 = require("./Search");
var ArgumentNullError_1 = require("./ArgumentNullError");
var HttpServer = (function () {
    function HttpServer(appInfo, config, dbProcessor) {
        this.actionMap = {
            "GET": this.processGetAction.bind(this),
            "POST": this.processPostAction.bind(this),
            "PUT": this.processPutAction.bind(this),
            "DELETE": this.processDeleteAction.bind(this)
        };
        if (!appInfo)
            throw new ArgumentNullError_1.ArgumentNullError("appInfo");
        if (!config)
            throw new ArgumentNullError_1.ArgumentNullError("config");
        if (!dbProcessor)
            throw new ArgumentNullError_1.ArgumentNullError("dbProcessor");
        this.appInfo = appInfo;
        this.config = config;
        this.dbProcessor = dbProcessor;
        this.server = Http.createServer(this.handleRequest.bind(this));
    }
    HttpServer.prototype.run = function () {
        var _this = this;
        this.server.listen(this.config.port, function () {
            console.log("Server listening on port %s.", _this.config.port);
        });
    };
    HttpServer.prototype.stop = function () {
        this.server.close();
    };
    HttpServer.prototype.handleRequest = function (request, response) {
        if ("/" == request.url) {
            response.statusCode = HttpStatusCodes.OK;
            response.write(Util.format("%s v%s", this.appInfo.name, this.appInfo.version));
            response.end();
            return;
        }
        else
            this.processDbRequest(request, response);
    };
    HttpServer.prototype.processDbRequest = function (request, response) {
        var _this = this;
        var dbCommand = DbCommand_1.DbCommand.parseRequest(this.config.dataPath, request);
        var dbPath = dbCommand.getDbRootPath();
        var dbReady = function () {
            var action = _this.actionMap[request.method];
            if (action == null)
                throw Error(Util.format("Unhandled method '%s'.", request.method));
            try {
                action(dbCommand, request, response);
            }
            catch (err) {
                _this.badRequest(response, err);
            }
        };
        FS.exists(dbPath, function (exists) {
            if (!exists)
                FS.mkdir(dbPath, 770, function () { return dbReady(); });
            else
                dbReady();
        });
    };
    HttpServer.prototype.processGetAction = function (dbCommand, request, response) {
        if (!dbCommand.hasEntityId()) {
            var search = Search_1.Search.parseString(dbCommand.query);
            this.dbProcessor.getMany(dbCommand, search, function (data) {
                response.statusCode = HttpStatusCodes.OK;
                response.write("[");
                data.forEach(function (item, index) {
                    response.write(item);
                    if (index < (data.length - 1))
                        response.write(",");
                });
                response.end("]");
            });
        }
        else {
            this.dbProcessor.getSingle(dbCommand, function (data) {
                if (data) {
                    response.statusCode = HttpStatusCodes.OK;
                    response.end(data);
                }
                else {
                    response.statusCode = HttpStatusCodes.NOT_FOUND;
                    response.end();
                }
            });
        }
    };
    HttpServer.prototype.processPostAction = function (dbCommand, request, response) {
        var _this = this;
        this.readAndParseRequestBody(request, function (entity) {
            if (entity == null) {
                _this.badRequest(response, "Could not parse payload as JSON.");
                return;
            }
            _this.dbProcessor.saveSingle(dbCommand, entity, function (data) {
                response.statusCode = HttpStatusCodes.CREATED;
                response.setHeader("Location", Util.format("/%s/%s/%s", dbCommand.dbName, dbCommand.entityName, entity.id));
                response.end(data);
            });
        }, function (err) { return _this.badRequest(response, err); });
    };
    HttpServer.prototype.processPutAction = function (dbCommand, request, response) {
        var _this = this;
        this.readAndParseRequestBody(request, function (entity) {
            if (entity == null) {
                _this.badRequest(response, "Could not parse payload as JSON.");
                return;
            }
            // TODO Add config option to optionally perform/enforce this.
            if (entity.id != null && entity.id != dbCommand.entityId) {
                _this.badRequest(response, "The entity identifier in the URL must match that of the entity in the request body.");
                return;
            }
            _this.dbProcessor.saveSingle(dbCommand, entity, function (data) {
                response.statusCode = HttpStatusCodes.OK;
                response.end(data);
            });
        }, function (err) { return _this.badRequest(response, err); });
    };
    HttpServer.prototype.processDeleteAction = function (dbCommand, request, response) {
        this.dbProcessor.deleteSingle(dbCommand, function () {
            response.statusCode = HttpStatusCodes.OK;
            response.end();
        });
    };
    HttpServer.prototype.readRequestBody = function (request, callback) {
        var rawData = "";
        request.on("data", function (chunk) {
            rawData += chunk;
        });
        request.on("end", function () {
            callback(rawData);
        });
    };
    HttpServer.prototype.readAndParseRequestBody = function (request, callback, errorCallback) {
        this.readRequestBody(request, function (rawData) {
            var data = null;
            try {
                data = JSON.parse(rawData);
            }
            catch (err) {
                errorCallback(Util.format("Unable to parse request body as JSON. %s", err));
                return;
            }
            callback(data);
        });
    };
    HttpServer.prototype.badRequest = function (response, err) {
        response.statusCode = HttpStatusCodes.BAD_REQUEST;
        response.end(err.toString());
    };
    return HttpServer;
})();
exports.HttpServer = HttpServer;

//# sourceMappingURL=data:application/json;base64,
