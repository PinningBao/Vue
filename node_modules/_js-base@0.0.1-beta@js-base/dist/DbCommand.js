var Util = require("util");
var Url = require("url");
var Path = require("path");
var ArgumentNullError_1 = require("./ArgumentNullError");
var DbCommand = (function () {
    function DbCommand(dataPath, dbName, entityName, entityId, query) {
        if (!dataPath)
            throw new ArgumentNullError_1.ArgumentNullError("dataPath");
        if (!dbName)
            throw new ArgumentNullError_1.ArgumentNullError("dbName");
        this.dataPath = dataPath;
        this.dbName = dbName;
        this.entityName = entityName;
        this.entityId = entityId;
        this.query = query;
    }
    DbCommand.prototype.getDbRootPath = function () {
        return Path.join(this.dataPath, this.dbName);
    };
    DbCommand.prototype.getEntityRootPath = function () {
        return Path.join(this.getDbRootPath(), this.entityName);
    };
    DbCommand.prototype.getEntityPath = function () {
        return Path.join(this.getEntityRootPath(), this.getFilenameForEntity(this.entityId));
    };
    DbCommand.prototype.getFilenameForEntity = function (id) {
        return Util.format("%s.json", id);
    };
    DbCommand.prototype.hasEntityName = function () {
        return (this.entityName != null);
    };
    DbCommand.prototype.hasEntityId = function () {
        return (this.hasEntityName() && this.entityId != null);
    };
    DbCommand.prototype.forEntityId = function (id) {
        return new DbCommand(this.dataPath, this.dbName, this.entityName, id, this.query);
    };
    DbCommand.parseRequest = function (dataPath, request) {
        var url = Url.parse(request.url);
        var match = /^\/?([^/?]+)(?:\/([^/?]+))?(?:\/([^/?]+))?/.exec(url.path);
        if (match != null) {
            var dbName = match[1];
            var entityName = match[2];
            var entityId = match[3];
            var dbCommand = new DbCommand(dataPath, dbName, entityName, entityId, url.query);
            return dbCommand;
        }
    };
    return DbCommand;
})();
exports.DbCommand = DbCommand;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ29tbWFuZC50cyJdLCJuYW1lcyI6WyJEYkNvbW1hbmQiLCJEYkNvbW1hbmQuY29uc3RydWN0b3IiLCJEYkNvbW1hbmQuZ2V0RGJSb290UGF0aCIsIkRiQ29tbWFuZC5nZXRFbnRpdHlSb290UGF0aCIsIkRiQ29tbWFuZC5nZXRFbnRpdHlQYXRoIiwiRGJDb21tYW5kLmdldEZpbGVuYW1lRm9yRW50aXR5IiwiRGJDb21tYW5kLmhhc0VudGl0eU5hbWUiLCJEYkNvbW1hbmQuaGFzRW50aXR5SWQiLCJEYkNvbW1hbmQuZm9yRW50aXR5SWQiLCJEYkNvbW1hbmQucGFyc2VSZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFDQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFZLEdBQUcsV0FBTyxLQUFLLENBQUMsQ0FBQTtBQUM1QixJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUM3QixrQ0FBZ0MscUJBQXFCLENBQUMsQ0FBQTtBQUV0RDtJQVFJQSxtQkFBWUEsUUFBZ0JBLEVBQUVBLE1BQWNBLEVBQUVBLFVBQW1CQSxFQUFFQSxRQUFpQkEsRUFBRUEsS0FBV0E7UUFDN0ZDLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBO1lBQUNBLE1BQU1BLElBQUlBLHFDQUFpQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDdkRBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1lBQUNBLE1BQU1BLElBQUlBLHFDQUFpQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFFbkRBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFD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
