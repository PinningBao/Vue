var Assert = require("assert");
var Config_1 = require("../Config");
var DbProcessor_1 = require("../DbProcessor");
var DbCommand_1 = require("../DbCommand");
var TestConfig_1 = require("./TestConfig");
var testConfig = TestConfig_1.TestConfig.instance;
var config = new Config_1.Config(60001, testConfig.relativeDataPath);
var dbProcessor = new DbProcessor_1.DbProcessor(config);
describe("DB Processor", function () {
    it("can save single new entity", function (done) {
        var cmd = new DbCommand_1.DbCommand(testConfig.dataPath, testConfig.dbName, "people");
        var entity = makeEntity();
        dbProcessor.saveSingle(cmd, entity, function (data, err) {
            if (err)
                throw Error(err);
            var savedEntity = JSON.parse(data);
            Assert.equal(savedEntity.firstName, entity.firstName);
            Assert.equal(savedEntity.lastName, entity.lastName);
            done();
        });
    });
    it("can save multiple new entities", function (done) {
        var cmd = new DbCommand_1.DbCommand(testConfig.dataPath, testConfig.dbName, "people");
        var entities = makeEntities(10);
        dbProcessor.saveMany(cmd, entities, function (data, errs) {
            if (errs.length > 0)
                throw Error(errs.toString());
            Assert.equal(data.length, entities.length);
            for (var i = 0; i < data.length; i++) {
                var savedEntity = JSON.parse(data[i]);
                Assert.equal(savedEntity.firstName, entities[i].firstName);
                Assert.equal(savedEntity.lastName, entities[i].lastName);
            }
            done();
        });
    });
});
function makeEntities(count, seed) {
    if (seed === void 0) { seed = 0; }
    var entities = new Array();
    for (var i = 0; i < count; i++)
        entities.push(makeEntity(seed + i));
    return entities;
}
function makeEntity(seed) {
    if (seed === void 0) { seed = 0; }
    return {
        firstName: "Person" + seed,
        lastName: "Person" + seed,
        age: (10 + seed)
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRicHJvY2Vzc29ydGVzdHMudHMiXSwibmFtZXMiOlsibWFrZUVudGl0aWVzIiwibWFrZUVudGl0eSJdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBWSxNQUFNLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFakMsdUJBQXFCLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLDRCQUEwQixnQkFBZ0IsQ0FBQyxDQUFBO0FBQzNDLDBCQUF3QixjQUFjLENBQUMsQ0FBQTtBQUd2QywyQkFBeUIsY0FBYyxDQUFDLENBQUE7QUFFeEMsSUFBSSxVQUFVLEdBQUcsdUJBQVUsQ0FBQyxRQUFRLENBQUM7QUFDckMsSUFBSSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzVELElBQUksV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUxQyxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxVQUFDLElBQUk7UUFDbEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMxRSxJQUFJLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUUxQixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsVUFBQyxJQUFZLEVBQUUsR0FBVztZQUMxRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFMUIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUVsQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFD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
