var Assert = require("assert");
var Search_1 = require("../Search");
var SearchCriteria_1 = require("../SearchCriteria");
var SearchOperatorRegistry_1 = require("../SearchOperatorRegistry");
var testData = [
    { id: 1, firstName: "Jim", lastName: "Smythe", dob: new Date(1980, 5, 10), sex: "male" },
    { id: 2, firstName: "Tammie", lastName: "Smythe", dob: new Date(1950, 12, 24), sex: "female" },
    { id: 3, firstName: "Adam", lastName: "Allen", dob: null, sex: "male" },
    { id: 4, firstName: "Erica", lastName: "Wilson", dob: null, sex: null }
];
var mockDbProcessor = {
    getMany: function (dbCommand, search, callback) {
        var results = new Array();
        for (var i = 0; i < testData.length; i++) {
            var entity = testData[i];
            var isMatch = search.test(entity);
            if (isMatch)
                results.push(JSON.stringify(entity));
        }
        callback(results);
    }
};
var mockDbCommand = {};
describe("Search Operator", function () {
    it("can filter by 'equals'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.Equals, "Jim"));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1], done);
        });
    });
    it("can filter by 'equals' with null value", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.Equals, null));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [3, 4], done);
        });
    });
    it("can filter by 'equals' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.Equals, "Jim", true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [2, 3, 4], done);
        });
    });
    it("can filter by 'not-equals'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.NotEquals, "Jim"));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [2, 3, 4], done);
        });
    });
    it("can filter by 'not-equals' with null value", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.NotEquals, null));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2], done);
        });
    });
    it("can filter by 'not-equals' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.NotEquals, "Jim", true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1], done);
        });
    });
    it("can filter by 'regex'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.Matches, /m/));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2, 3], done);
        });
    });
    it("can filter by 'regex' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("firstName", SearchOperatorRegistry_1.SearchOperatorRegistry.Matches, /m/, true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [4], done);
        });
    });
    it("can filter by 'less-than'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.LessThan, new Date(1980, 5, 10)));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [2], done);
        });
    });
    it("can filter by 'less-than' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.LessThan, new Date(1980, 5, 10), true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 3, 4], done);
        });
    });
    it("can filter by 'less-than-equal'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.LessThanOrEqual, new Date(1980, 5, 10)));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2], done);
        });
    });
    it("can filter by 'less-than-equal' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.LessThanOrEqual, new Date(1980, 5, 10), true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [3, 4], done);
        });
    });
    it("can filter by 'greater-than'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.GreaterThan, new Date(1980, 5, 10)));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [], done);
        });
    });
    it("can filter by 'greater-than' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.GreaterThan, new Date(1980, 5, 10), true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2, 3, 4], done);
        });
    });
    it("can filter by 'greater-than-equal'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.GreaterThanOrEqual, new Date(1980, 5, 10)));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1], done);
        });
    });
    it("can filter by 'greater-than-equal' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("dob", SearchOperatorRegistry_1.SearchOperatorRegistry.GreaterThanOrEqual, new Date(1980, 5, 10), true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [2, 3, 4], done);
        });
    });
    it("can filter by 'in'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("lastName", SearchOperatorRegistry_1.SearchOperatorRegistry.In, ["Allen", "Wilson"]));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [3, 4], done);
        });
    });
    it("can filter by 'in' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("lastName", SearchOperatorRegistry_1.SearchOperatorRegistry.In, ["Allen", "Wilson"], true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2], done);
        });
    });
    it("can filter by 'not-in'", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("lastName", SearchOperatorRegistry_1.SearchOperatorRegistry.NotIn, ["Allen", "Wilson"]));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [1, 2], done);
        });
    });
    it("can filter by 'not-in' (inverse)", function (done) {
        var search = new Search_1.Search();
        search.criteria.push(new SearchCriteria_1.SearchCriteria("lastName", SearchOperatorRegistry_1.SearchOperatorRegistry.NotIn, ["Allen", "Wilson"], true));
        mockDbProcessor.getMany(mockDbCommand, search, function (data) {
            assertTestData(data, [3, 4], done);
        });
    });
});
function assertTestData(data, expectedIds, done) {
    var dataIds = new Array();
    var unexpectedIds = new Array();
    var missingIds = new Array();
    for (var i = 0; i < data.length; i++)
        dataIds.push(JSON.parse(data[i]).id);
    Assert.deepEqual(dataIds, expectedIds);
    done();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlYXJjaG9wZXJhdG9ydGVzdHMudHMiXSwibmFtZXMiOlsiYXNzZXJ0VGVzdERhdGEiXSwibWFwcGluZ3MiOiJBQUNBLElBQVksTUFBTSxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBRWpDLHVCQUFxQixXQUFXLENBQUMsQ0FBQTtBQUdqQywrQkFBNkIsbUJBQW1CLENBQUMsQ0FBQTtBQUNqRCx1Q0FBcUMsMkJBQTJCLENBQUMsQ0FBQTtBQUdqRSxJQUFJLFFBQVEsR0FBRztJQUNYLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtJQUN4RixFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUU7SUFDOUYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDdkUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7Q0FDMUUsQ0FBQztBQUNGLElBQUksZUFBZSxHQUFpQjtJQUNoQyxPQUFPLEVBQUUsVUFBUyxTQUFvQixFQUFFLE1BQWMsRUFBRSxRQUF3RTtRQUM1SCxJQUFJLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBRWxDLEdBQUcsQ0FBQyxDQUFDLEdB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dkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztRQUUxQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLCtCQUFjLENBQUMsVUFBVSxFQUFFLCtDQUFzQixDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFVBQUMsSUFBbUI7WUFDL0QsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLFVBQVUsSUFBSTtRQUNqRCxJQUFJLE1BQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO1FBRTFCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksK0JBQWMsQ0FBQyxVQUFVLEVBQUUsK0NBQXNCLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFVBQUMsSUFBbUI7WUFDL0QsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCx3QkFBd0IsSUFBbUIsRUFBRSxXQUEwQixFQUFFLElBQWU7SUFDcEZBLElBQUlBLE9BQU9BLEdBQUdBLElBQUlBLEtBQUtBLEVBQVVBLENBQUNBO0lBQ2xDQSxJQUFJQSxhQUFhQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtJQUN4Q0EsSUFBSUEsVUFBVUEsR0FBR0EsSUFBSUEsS0FBS0EsRUFBVUEsQ0FBQ0E7SUFFckNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBO1FBQ2hDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUV6Q0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsV0FBV0EsQ0FBQ0EsQ0FBQ0E7SUFFdkNBLElBQUlBLEVBQUVBLENBQUNBO0FBQ1hBLENBQUNBIiwiZmlsZSI6IlNlYXJjaE9wZXJhdG9yVGVzdHMuanMiLCJzb3VyY2VSb290IjoiLi4vIn0=
