var Assert = require("assert");
var Util = require("util");
var Path = require("path");
var DbCommand_1 = require("../DbCommand");
var TestConfig_1 = require("./TestConfig");
var testConfig = TestConfig_1.TestConfig.instance;
describe("DB Command", function () {
    it("can parse DB-only request", function () {
        var url = Util.format("/%s", testConfig.dbName);
        var cmd = DbCommand_1.DbCommand.parseRequest(testConfig.dataPath, buildRequest(url));
        Assert.equal(cmd.dbName, testConfig.dbName);
    });
    it("can parse entity request", function () {
        var url = Util.format("/%s/people", testConfig.dbName);
        var cmd = DbCommand_1.DbCommand.parseRequest(testConfig.dataPath, buildRequest(url));
        Assert.equal(cmd.dbName, testConfig.dbName);
        Assert.equal(cmd.entityName, "people");
    });
    it("can parse entity ID request", function () {
        var url = Util.format("/%s/people/123", testConfig.dbName);
        var cmd = DbCommand_1.DbCommand.parseRequest(testConfig.dataPath, buildRequest(url));
        Assert.equal(cmd.dbName, testConfig.dbName);
        Assert.equal(cmd.entityName, "people");
        Assert.equal(cmd.entityId, "123");
    });
    it("can parse querystring request", function () {
        var url = Util.format("/%s/people/123?x=y", testConfig.dbName);
        var cmd = DbCommand_1.DbCommand.parseRequest(testConfig.dataPath, buildRequest(url));
        Assert.equal(cmd.dbName, testConfig.dbName);
        Assert.equal(cmd.entityName, "people");
        Assert.equal(cmd.entityId, "123");
        Assert.equal(cmd.query, "x=y");
    });
    it("builds correct DB root path", function () {
        var cmd = getCommand();
        var expected = Path.join(testConfig.dataPath, testConfig.dbName);
        Assert.equal(cmd.getDbRootPath(), expected);
    });
    it("builds correct entity root path", function () {
        var cmd = getCommand();
        var expected = Path.join(testConfig.dataPath, testConfig.dbName, "people");
        Assert.equal(cmd.getEntityRootPath(), expected);
    });
    it("builds correct entity path", function () {
        var cmd = getCommand();
        var expected = Path.join(testConfig.dataPath, testConfig.dbName, "people", "123.json");
        Assert.equal(cmd.getEntityPath(), expected);
    });
});
function buildRequest(url) {
    var x = {};
    x.url = url;
    return x;
    // return <IncomingMessage> {
    //     httpVersion: "1.1",
    //     headers: null,
    //     rawHeaders: new Array<string>(),
    //     trailers: null,
    //     rawTrailers: null,
    //     method: "GET",
    //     url: url,
    //     statusCode: 200,
    //     statusMessage: "OK",
    //     socket: null,
    //     setTimeout: (msecs: number, callback: Function) => <NodeJS.Timer>null,
    //     addListener: null,
    //     on: null,
    //     once: null,
    //     removeListener = null,
    //     removeAllListeners = null,
    //     setMaxListeners = null,
    //     getMaxListeners = null,
    //     listeners = null,
    //     listenerCount = null,
    //     
    // };
}
function getCommand() {
    return new DbCommand_1.DbCommand(testConfig.dataPath, testConfig.dbName, "people", "123");
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiY29tbWFuZHRlc3RzLnRzIl0sIm5hbWVzIjpbImJ1aWxkUmVxdWVzdCIsImdldENvbW1hbmQiXSwibWFwcGluZ3MiOiJBQUNBLElBQVksTUFBTSxXQUFNLFFBQVEsQ0FBQyxDQUFBO0FBQ2pDLElBQVksSUFBSSxXQUFNLE1BQU0sQ0FBQyxDQUFBO0FBQzdCLElBQVksSUFBSSxXQUFNLE1BQU0sQ0FBQyxDQUFBO0FBRTdCLDBCQUF3QixjQUFjLENBQUMsQ0FBQTtBQUN2QywyQkFBeUIsY0FBYyxDQUFDLENBQUE7QUFFeEMsSUFBSSxVQUFVLEdBQUcsdUJBQVUsQ0FBQyxRQUFRLENBQUM7QUFFckMsUUFBUSxDQUFDLFlBQVksRUFBRTtJQUNuQixFQUFFLENBQUMsMkJBQTJCLEVBQUU7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksR0FBRyxHQUFHLHFCQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFekUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEdBQUcscUJBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV6RSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxLQUFL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Q0E7SUFFWkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFVEEsNkJBQTZCQTtJQUM3QkEsMEJBQTBCQTtJQUMxQkEscUJBQXFCQTtJQUNyQkEsdUNBQXVDQTtJQUN2Q0Esc0JBQXNCQTtJQUN0QkEseUJBQXlCQTtJQUN6QkEscUJBQXFCQTtJQUNyQkEsZ0JBQWdCQTtJQUNoQkEsdUJBQXVCQTtJQUN2QkEsMkJBQTJCQTtJQUMzQkEsb0JBQW9CQTtJQUNwQkEsNkVBQTZFQTtJQUM3RUEseUJBQXlCQTtJQUN6QkEsZ0JBQWdCQTtJQUNoQkEsa0JBQWtCQTtJQUNsQkEsNkJBQTZCQTtJQUM3QkEsaUNBQWlDQTtJQUNqQ0EsOEJBQThCQTtJQUM5QkEsOEJBQThCQTtJQUM5QkEsd0JBQXdCQTtJQUN4QkEsNEJBQTRCQTtJQUM1QkEsT0FBT0E7SUFDUEEsS0FBS0E7QUFDVEEsQ0FBQ0E7QUFFRDtJQUNJQyxNQUFNQSxDQUFDQSxJQUFJQSxxQkFBU0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBVUEsQ0FBQ0EsTUFBTUEsRUFBRUEsUUFBUUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7QUFDbEZBLENBQUNBIiwiZmlsZSI6IkRiQ29tbWFuZFRlc3RzLmpzIiwic291cmNlUm9vdCI6Ii4uLyJ9
