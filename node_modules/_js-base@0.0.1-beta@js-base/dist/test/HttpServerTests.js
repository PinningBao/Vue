var Assert = require("assert");
var Util = require("util");
var Http = require("http");
var HttpStatusCodes = require("http-status-codes");
var Path = require("path");
var rimraf = require("rimraf");
var HttpServer_1 = require("../HttpServer");
var Config_1 = require("../Config");
var DbProcessor_1 = require("../DbProcessor");
var TestConfig_1 = require("./TestConfig");
var testConfig = TestConfig_1.TestConfig.instance;
var config = new Config_1.Config(60001, testConfig.relativeDataPath);
var server = new HttpServer_1.HttpServer(testConfig.appInfo, config, new DbProcessor_1.DbProcessor(config));
server.run();
describe("HTTP Server", function () {
    it("should support CRUD", function (done) {
        var originalEntity = {
            firstName: "Jim",
            lastName: "Smythe"
        };
        // POST
        Http.request(getHttpOptions("/" + testConfig.dbName + "/people", "POST"), function (response) {
            var entityLocation = response.headers["location"];
            Assert.equal(response.statusCode, HttpStatusCodes.CREATED);
            Assert.notEqual(entityLocation, null);
            readEntity(response, function (entity) {
                Assert.equal(entity.firstName, originalEntity.firstName);
                Assert.equal(entity.lastName, originalEntity.lastName);
                originalEntity.firstName = "Tammie";
                originalEntity.age = 22;
                // PUT
                Http.request(getHttpOptions(entityLocation, "PUT"), function (response) {
                    Assert.equal(HttpStatusCodes.OK, response.statusCode);
                    readEntity(response, function (entity) {
                        Assert.equal(entity.firstName, originalEntity.firstName);
                        Assert.equal(entity.age, originalEntity.age);
                        // GET
                        Http.request(getHttpOptions(entityLocation, "GET"), function (response) {
                            Assert.equal(HttpStatusCodes.OK, response.statusCode);
                            readEntity(response, function (entity) {
                                Assert.equal(entity.firstName, originalEntity.firstName);
                                Assert.equal(entity.lastName, originalEntity.lastName);
                                Assert.equal(entity.age, originalEntity.age);
                                // DELETE
                                Http.request(getHttpOptions(entityLocation, "DELETE"), function (response) {
                                    Assert.equal(response.statusCode, HttpStatusCodes.OK);
                                    // Get (again)
                                    Http.request(getHttpOptions(entityLocation, "GET"), function (response) {
                                        Assert.equal(response.statusCode, HttpStatusCodes.NOT_FOUND);
                                        done();
                                    })
                                        .end();
                                })
                                    .end();
                            });
                        })
                            .end();
                    });
                })
                    .end(JSON.stringify(originalEntity));
            });
        })
            .end(JSON.stringify(originalEntity));
    });
    it("can GET multiple", function (done) {
        var path = "/" + testConfig.dbName + "/people";
        var total = 9;
        var current = 0;
        var postNext = function () {
            if (current != total) {
                var entity = {
                    firstName: "First" + current,
                    lastName: "Last" + current
                };
                Http.request(getHttpOptions(path, "POST"), function (response) {
                    Assert.equal(response.statusCode, HttpStatusCodes.CREATED);
                    current++;
                    postNext();
                })
                    .end(JSON.stringify(entity));
            }
            else
                getAll();
        };
        var getAll = function () {
            Http.request(getHttpOptions(path, "GET"), function (response) {
                readEntity(response, function (entities) {
                    Assert.notEqual(entities, null);
                    Assert.equal(Array.isArray(entities), true);
                    Assert.equal(entities.length >= total, true);
                    for (var i = 0; i < entities.length; i++) {
                        var entity = entities[i];
                        Assert.notEqual(entity, null);
                        Assert.equal(entity.hasOwnProperty("firstName"), true);
                        Assert.notEqual(entity.firstName, null);
                        Assert.equal(entity.hasOwnProperty("lastName"), true);
                        Assert.notEqual(entity.lastName, null);
                    }
                    done();
                });
            })
                .end();
        };
        postNext();
    });
    it("can execute simple search", function (done) {
        this.timeout(0);
        var path = "/" + testConfig.dbName + "/people";
        Http.request(getHttpOptions(path, "POST"), function (response) {
            Assert.equal(response.statusCode, HttpStatusCodes.CREATED);
            var search = {
                firstName: {
                    fieldName: "firstName",
                    operator: "equals",
                    value: "Jim"
                }
            };
            var qs = Util.format("search=%s", encodeURIComponent(JSON.stringify(search)));
            var searchPath = Util.format("%s?%s", path, qs);
            Http.request(getHttpOptions(searchPath, "GET"), function (response) {
                readEntity(response, function (entities) {
                    Assert.notEqual(entities, null);
                    Assert.equal(Array.isArray(entities), true);
                    Assert.equal(entities.length > 0, true);
                    for (var i = 0; i < entities.length; i++) {
                        var entity = entities[i];
                        Assert.equal(entity.firstName, search.firstName.value);
                    }
                    done();
                });
            })
                .end();
        })
            .end(JSON.stringify({
            firstName: "Jim",
            lastName: "Smythe"
        }));
    });
    after(function (done) {
        rimraf(Path.resolve(testConfig.dataPath, testConfig.dbName), function (err) {
            server.stop();
            done(err);
        });
    });
});
function getHttpOptions(path, method) {
    return {
        host: process.env.IP,
        port: config.port,
        method: method,
        path: path
    };
}
function readEntity(response, callback) {
    var rawData = "";
    response.on("data", function (chunk) { rawData += chunk.toString(); });
    response.on("end", function () {
        var parsedEntity = null;
        try {
            parsedEntity = JSON.parse(rawData);
        }
        catch (err) {
            throw Error(Util.format("Could not parse JSON returned from URL \"%s\": %s", response.url, rawData));
        }
        callback(parsedEntity);
    });
}

//# sourceMappingURL=data:application/json;base64,
